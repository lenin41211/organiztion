#include <iostream>
#include <pqxx/pqxx> 

using namespace std;
using namespace pqxx;

int main(int argc, char* argv[]) {
   string sql,sql1;
   
   try {
      connection C("dbname = postgres user = postgres password = Ctpl@789 \
      hostaddr = 127.0.0.1 port = 5432");
      if (C.is_open()) {
         cout << "Opened database successfully: " << C.dbname() << endl;
      } else {
         cout << "Can't open database" << endl;
         return 1;
      }

      /* Create SQL statement */
      sql = "SELECT * from accountss";
      sql1 = "CALL transfer(1,2,1000)";
      /* Create a non-transactional object. */
      nontransaction N(C);
      
      result R( N.exec( sql ));

      
      /* List down all the records */
      for (result::const_iterator c = R.begin(); c != R.end(); ++c) {
         cout << "ID = " << c[0].as<string>() << endl;
         cout << "Name = " << c[1].as<string>() << endl;
         cout << "Balance = " << c[2].as<string>() << endl;
        
      }
      /* Execute SQL query */
      N.exec( sql1 );
      cout << "Result after calling procedure : "<<endl;
      R  = ( N.exec( sql ));

      
      /* List down all the records */
      for (result::const_iterator c = R.begin(); c != R.end(); ++c) {
         cout << "ID = " << c[0].as<string>() << endl;
         cout << "Name = " << c[1].as<string>() << endl;
         cout << "Balance = " << c[2].as<string>() << endl;
        
      }
      cout << "Operation done successfully" << endl;
      C.disconnect ();
   } catch (const std::exception &e) {
      cerr << e.what() << std::endl;
      return 1;
   }

   return 0;
}





// CREATE TABLE accountss (
//     id INT GENERATED BY DEFAULT AS IDENTITY,
//     name VARCHAR(100) NOT NULL,
//     balance DEC(15,2) NOT NULL,
//     PRIMARY KEY(id)
// );

// INSERT INTO accountss(name,balance)
// VALUES('Bob',10000);
 
// INSERT INTO accountss(name,balance)
// VALUES('Alice',10000);
// SELECT * FROM accountss;

// CREATE OR REPLACE PROCEDURE transfer(INT, INT, DEC)
// LANGUAGE plpgsql    
// AS $$
// BEGIN
//     -- subtracting the amount from the sender's account 
//     UPDATE accountss 
//     SET balance = balance - $3
//     WHERE id = $1;
 
//     -- adding the amount to the receiver's account
//     UPDATE accountss 
//     SET balance = balance + $3
//     WHERE id = $2;
 
//     COMMIT;
// END;
// $$;

// CALL transfer(1,2,1000);

// SELECT * FROM accountss;CREATE TABLE accountss (
//     id INT GENERATED BY DEFAULT AS IDENTITY,
//     name VARCHAR(100) NOT NULL,
//     balance DEC(15,2) NOT NULL,
//     PRIMARY KEY(id)
// );

// INSERT INTO accountss(name,balance)
// VALUES('Bob',10000);
 
// INSERT INTO accountss(name,balance)
// VALUES('Alice',10000);
// SELECT * FROM accountss;

// CREATE OR REPLACE PROCEDURE transfer(INT, INT, DEC)
// LANGUAGE plpgsql    
// AS $$
// BEGIN
//     -- subtracting the amount from the sender's account 
//     UPDATE accountss 
//     SET balance = balance - $3
//     WHERE id = $1;
 
//     -- adding the amount to the receiver's account
//     UPDATE accountss 
//     SET balance = balance + $3
//     WHERE id = $2;
 
//     COMMIT;
// END;
// $$;

// CALL transfer(1,2,1000);

// SELECT * FROM accountss;